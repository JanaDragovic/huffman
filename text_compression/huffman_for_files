import heapq
import os
import math

# klasa koja stvara Hafmenovo stablo
class HafmenovAlgoritam:
	def __init__(self, path):
		self.path = path
		self.heap = []
		self.codes = {}
		self.reverse_mapping = {}
	class HeapNode:
		def __init__(self, char, freq):
			self.char = char
			self.freq = freq
			self.left = None
			self.right = None

		def __lt__(self, other):
			return self.freq < other.freq

		def __eq__(self, other):
			if(other == None):
				return False
			if(not isinstance(other, self.HeapNode)):
				return False
			return self.freq == other.freq

	# funkcije za vrÅ¡enje kompresije

	# prebrojavanje karaktera u tekstu
	
	def recnik_frekvencija(self, text):
		frekvencija = {}
		for character in text:
			if not character in frekvencija:
				frekvencija[character] = 0
			frekvencija[character] += 1
		return frekvencija


	def make_heap(self, frekvencija):
		for key in frekvencija:
			node = self.HeapNode(key, frekvencija[key])
			heapq.heappush(self.heap, node)

	def merge_nodes(self):
		while(len(self.heap)>1):
			node1 = heapq.heappop(self.heap)
			node2 = heapq.heappop(self.heap)

			merged = self.HeapNode(None, node1.freq + node2.freq)
			merged.left = node1
			merged.right = node2

			heapq.heappush(self.heap, merged)

	# kodiranje teksta

	def kodiranje_pomocno(self, root, current_code):
		if(root == None):
			return

		if(root.char != None):
			self.codes[root.char] = current_code
			self.reverse_mapping[current_code] = root.char
			return

		self.kodiranje_pomocno(root.left, current_code + "0")
		self.kodiranje_pomocno(root.right, current_code + "1")


	def kodiranje(self):
		root = heapq.heappop(self.heap)
		current_code = ""
		self.kodiranje_pomocno(root, current_code)


	def get_enkodovani_tekst(self, text):
		enkodovani_tekst = ""
		for character in text:
			enkodovani_tekst += self.codes[character]
		return enkodovani_tekst


	def pad_enkodovani_tekst(self, enkodovani_tekst):
		extra_padding = 8 - len(enkodovani_tekst) % 8
		for i in range(extra_padding):
			enkodovani_tekst += "0"

		padded_info = "{0:08b}".format(extra_padding)
		enkodovani_tekst = padded_info + enkodovani_tekst
		return enkodovani_tekst


	def get_niz_bajtova(self, padded_enkodovani_tekst):
		if(len(padded_enkodovani_tekst) % 8 != 0):
			print("Dati tekst se ne moze enkodovati")
			exit(0)

		b = bytearray()
		for i in range(0, len(padded_enkodovani_tekst), 8):
			byte = padded_enkodovani_tekst[i:i+8]
			b.append(int(byte, 2))
		return b

	# kompresija teksta

	def kompresija(self):
		filename, file_extension = os.path.splitext(self.path)
		output_path = filename + ".bin"

		with open(self.path, 'r+') as file, open(output_path, 'wb') as output:
			text = file.read()
			text = text.rstrip()

			frekvencija = self.recnik_frekvencija(text)
			self.make_heap(frekvencija)
			self.merge_nodes()
			self.kodiranje()

			enkodovani_tekst = self.get_enkodovani_tekst(text)
			padded_enkodovani_tekst = self.pad_enkodovani_tekst(enkodovani_tekst)

			b = self.get_niz_bajtova(padded_enkodovani_tekst)
			output.write(bytes(b))

		print("Fajl je kompresovan")
		return output_path

# funkcija za racunanje entropije

def racunanje_entropije(huffman_coding_instance):
    enkodovani_tekst = ""
    with open(huffman_coding_instance.path, 'r') as file:
        text = file.read()
        frekvencija = huffman_coding_instance.recnik_frekvencija(text)
        huffman_coding_instance.make_heap(frekvencija)
        huffman_coding_instance.merge_nodes()
        huffman_coding_instance.kodiranje()
        enkodovani_tekst = huffman_coding_instance.get_enkodovani_tekst(text)

    ukupan_broj_bita = len(enkodovani_tekst)
    frekvencija = huffman_coding_instance.recnik_frekvencija(enkodovani_tekst)

    entropija = 0
    for count in frekvencija.values():
        verovatnoca = count / ukupan_broj_bita
        entropija += verovatnoca * math.log(1/verovatnoca,2)

    return entropija

# funkcija za racunanje efikasnosti

def racunanje_efikasnosti(originalna_velicina, kompresovana_velicina):
    efikasnost = (1 - kompresovana_velicina / originalna_velicina) * 100
    return efikasnost

# kompresija tekstualnog fajla

# pre pokretanja programa potrebno je zameniti putanju do fajla 
# sa stvarnom putanjom tekstualnog fajle koji se treba kompresovati

fajl = HafmenovAlgoritam("C:\\Users\\Korisnik\\Documents\\ETF\\TIK\\huffman\\text_compression\\TheLittlePrince.txt")
entropija = racunanje_entropije(fajl)
print("Entropija:", entropija)

originalna_velicina = os.path.getsize(fajl.path) * 8  # Velicina originalnog fajla u bitima
kompresovana_velicina = os.path.getsize(fajl.kompresija()) * 8  # Velicina kompresovanog fajla u bitima

efikasnost = racunanje_efikasnosti(originalna_velicina, kompresovana_velicina)
print("Efikasnost kompresije:", efikasnost, "%")


